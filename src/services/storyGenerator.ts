
import { supabase } from "@/integrations/supabase/client";

export interface StoryRequest {
  age: number;
  personality: string;
  interests: string[];
  dislikes?: string;
  category?: 'bedtime' | 'ABCs' | 'math' | 'science' | 'adventure';
}

export interface GeneratedStory {
  title: string;
  content: string;
  ssmlContent: string;
  category: string;
  duration: number;
}

export class StoryGenerator {
  private static async generateStoryWithAI(request: StoryRequest): Promise<GeneratedStory> {
    const { age, personality, interests, dislikes, category } = request;
    
    // Create a detailed prompt for the AI to generate SSML-enhanced stories
    const prompt = `Create a children's story for a ${age}-year-old child with the following characteristics:
    
Personality: ${personality}
Interests: ${interests.join(', ')}
${dislikes ? `Dislikes: ${dislikes}` : ''}
Category: ${category || 'adventure'}

Requirements:
- Age-appropriate language for a ${age}-year-old
- Story should be engaging and match their ${personality} personality
- Include elements related to their interests: ${interests.join(', ')}
${dislikes ? `- Avoid mentioning: ${dislikes}` : ''}
- Keep the story between 150-300 words for a 3-5 minute reading time
- Include dialogue to make it interactive
- End with a positive, educational message
- Use simple sentences and vocabulary appropriate for the age group
- Make the story unique and creative each time
- Generate both a clean text version and an SSML version for expressive speech

SSML Requirements:
- Use <break time="1s"/> for dramatic pauses
- Use <emphasis level="moderate"> for important words
- Use <prosody rate="slow"> for suspenseful moments
- Use <prosody rate="fast"> for exciting action
- Use <prosody pitch="high"> for character voices
- Add appropriate breaks and emphasis to make the story more engaging

Format your response as:
TITLE: [Story Title]
STORY: [Clean Story Content - no SSML markup]
SSML: [Story Content with SSML markup for expressive reading]`;

    try {
      console.log('Calling AI story generation with prompt:', prompt.substring(0, 200) + '...');
      
      const { data, error } = await supabase.functions.invoke('generate-story-ai', {
        body: { prompt }
      });

      if (error) {
        console.error('AI story generation error:', error);
        throw new Error(`AI generation failed: ${error.message}`);
      }

      if (!data || !data.generatedText) {
        console.error('No generated text received from AI');
        throw new Error('No story content generated by AI. Please check your OpenAI API key configuration.');
      }

      // Parse the AI response
      const response = data.generatedText;
      console.log('AI generated response:', response.substring(0, 200) + '...');
      
      const titleMatch = response.match(/TITLE:\s*(.*?)(?:\n|STORY:)/i);
      const storyMatch = response.match(/STORY:\s*(.*?)(?:\n|SSML:)/i);
      const ssmlMatch = response.match(/SSML:\s*([\s\S]*)/i);

      const title = titleMatch ? titleMatch[1].trim() : `The ${personality.charAt(0).toUpperCase() + personality.slice(1)} Adventure`;
      let content = storyMatch ? storyMatch[1].trim() : '';
      let ssmlContent = ssmlMatch ? ssmlMatch[1].trim() : '';
      
      // If we don't have separate content, extract clean text from the response
      if (!content && !ssmlContent) {
        content = response.replace(/^TITLE:\s*.*?\n/i, '').trim();
        ssmlContent = content; // Fallback to same content if no SSML provided
      } else if (!content && ssmlContent) {
        // Extract clean text from SSML
        content = ssmlContent.replace(/<[^>]*>/g, '').replace(/\s+/g, ' ').trim();
      } else if (content && !ssmlContent) {
        // Use content as SSML base if no SSML provided
        ssmlContent = content;
      }

      // Ensure we have valid content
      if (!content || content.length < 50) {
        throw new Error('Generated story content is too short or invalid. Please try again.');
      }

      // Estimate duration based on word count (average reading speed for children's stories)
      const wordCount = content.split(/\s+/).length;
      const duration = Math.max(120, Math.min(300, wordCount * 0.8)); // 0.8 seconds per word

      console.log('Successfully generated AI story:', { title, wordCount, duration });

      return {
        title,
        content,
        ssmlContent,
        category: category || 'adventure',
        duration: Math.round(duration)
      };
    } catch (error) {
      console.error('Error calling AI story generation:', error);
      // Don't fall back to hardcoded stories - throw the error so user knows AI is required
      throw new Error(`Story generation failed: ${error.message}. Please ensure your OpenAI API key is configured correctly.`);
    }
  }

  static async generateStory(profileId: string, category?: string): Promise<string | null> {
    try {
      // Get the child profile
      let profile;
      if (profileId === 'demo-profile') {
        // Get from localStorage for demo
        const stored = localStorage.getItem('childProfile');
        profile = stored ? JSON.parse(stored) : null;
      } else {
        const { data, error } = await supabase
          .from('child_profiles')
          .select('*')
          .eq('id', profileId)
          .single();
        
        if (error) throw error;
        profile = data;
      }

      if (!profile) throw new Error('Profile not found');

      // Generate story content using AI - no fallbacks, AI is required
      const storyRequest: StoryRequest = {
        age: profile.age,
        personality: profile.personality,
        interests: profile.interests,
        dislikes: profile.dislikes,
        category: category as any || 'adventure'
      };

      console.log('Generating AI story with request:', storyRequest);
      const generatedStory = await this.generateStoryWithAI(storyRequest);
      console.log('Generated story:', generatedStory);

      // Save story to database (skip for demo profile)
      if (profileId !== 'demo-profile') {
        const { data: storyData, error: storyError } = await supabase
          .from('stories')
          .insert({
            child_profile_id: profileId,
            title: generatedStory.title,
            content: generatedStory.content,
            category: generatedStory.category,
            duration: generatedStory.duration
          })
          .select()
          .single();

        if (storyError) throw storyError;
        return storyData.id;
      } else {
        // Store in localStorage for demo
        const demoStory = {
          id: 'demo-story-' + Date.now(),
          ...generatedStory,
          child_profile_id: profileId
        };
        localStorage.setItem('currentStory', JSON.stringify(demoStory));
        return demoStory.id;
      }
    } catch (error) {
      console.error('Error generating story:', error);
      throw error; // Re-throw so the UI can show the actual error
    }
  }

  static async getStory(storyId: string) {
    if (storyId.startsWith('demo-story-')) {
      // Get from localStorage for demo
      const stored = localStorage.getItem('currentStory');
      return stored ? JSON.parse(stored) : null;
    }

    const { data, error } = await supabase
      .from('stories')
      .select('*')
      .eq('id', storyId)
      .single();
    
    if (error) throw error;
    return data;
  }
}
